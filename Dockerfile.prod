# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

################################################################################
# Create a stage for building the application.
ARG GO_VERSION=1.23
FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine AS build
WORKDIR /app
COPY ./configs/ /app/configs/
COPY ./web/ /app/web/

RUN --mount=type=cache,target=/var/cache/apk \
    apk --update add alpine-sdk musl-dev sqlite-dev

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds.
# Leverage bind mounts to go.sum and go.mod to avoid having to copy them into
# the container.
RUN --mount=type=cache,target=/go/pkg/mod/ \
    --mount=type=bind,source=go.sum,target=go.sum \
    --mount=type=bind,source=go.mod,target=go.mod \
    go mod download -x

# This is the architecture youâ€™re building for, which is passed in by the builder.
# Placing it here allows the previous steps to be cached across architectures.
ARG TARGETARCH

# Build the application.
# Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds.
# Leverage a bind mount to the current directory to avoid having to copy the
# source code into the container.
# CGO_ENABLED=1 -tags are required for sqlite3 & go-fitz
RUN --mount=type=cache,target=/go/pkg/mod/ \
    --mount=type=bind,target=. \
    CGO_ENABLED=1 GOARCH=$TARGETARCH go build -race -tags "libsqlite3 linux musl" -o /bin/fiber-api .

################################################################################
# Create a intermediate stage for running the DB migration in k3s as the "initContainer"
# FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine AS db-migration
FROM alpine:latest AS db-migration
WORKDIR /app

RUN --mount=type=cache,target=/var/cache/apk \
    apk --no-cache --update add \
    sqlite-dev && \
    # go install -tags 'postgres mysql sqlite3 mongodb libsqlite3 linux musl' github.com/golang-migrate/migrate/v4/cmd/migrate@latest && \
    apk cache clean

COPY ./migrations/ /app/migrations/
COPY --from=build /app/configs/ /app/configs/
COPY --from=build /bin/fiber-api /app/bin/

CMD ["tail", "-f", "/dev/null"]

################################################################################
# Create a intermediate stage for running the rabbitmq worker k3s
FROM alpine:latest AS rbmq-worker
WORKDIR /app

ARG UID=10001
RUN --mount=type=cache,target=/var/cache/apk \
    apk --no-cache --update add \
    sqlite-dev && \
    # Create a non-privileged user that the app will run under.
    # See https://docs.docker.com/go/dockerfile-user-best-practices/
    apk cache clean && \
    adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser && \
    chown 10001:10001 -R /app

# Copy the executable from the "build" stage.
COPY --from=build /app/configs/ /app/configs/
COPY --from=build /bin/fiber-api /app/bin/

USER appuser

# What the container should run when it is started.
ENTRYPOINT [ "/app/bin/fiber-api", "run-rbmq-worker" ]

################################################################################
# Create a new stage for running the application that contains the minimal
# runtime dependencies for the application. This often uses a different base
# image from the build stage where the necessary files are copied from the build
# stage.
#
# The example below uses the alpine image as the foundation for running the app.
# By specifying the "latest" tag, it will also use whatever happens to be the
# most recent version of that image when you build your Dockerfile. If
# reproducability is important, consider using a versioned tag
# (e.g., alpine:3.17.2) or SHA (e.g., alpine@sha256:c41ab5c992deb4fe7e5da09f67a8804a46bd0592bfdf0b1847dde0e0889d2bff).
FROM alpine:latest AS final
WORKDIR /app

# Install any runtime dependencies that are needed to run your application.
# Leverage a cache mount to /var/cache/apk/ to speed up subsequent builds.
RUN --mount=type=cache,target=/var/cache/apk \
    apk --no-cache --update add \
        ca-certificates \
        tzdata \
        sqlite-dev \
        ffmpeg && \
        # bash && \
        update-ca-certificates && \
        apk cache clean && \
        mkdir -p /app/bin

# Copy the executable from the "build" stage.
COPY --from=build /bin/fiber-api /app/bin/
COPY --from=build /app/configs/ /app/configs/
COPY --from=build /app/web/ /app/web/

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
# ARG UID=10001
ARG UID
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser && \
    # chown 10001:10001 -R /app
    chown ${UID}:${UID} -R /app
USER appuser

# Expose the port that the application listens on.
EXPOSE 7000

# What the container should run when it is started.
ENTRYPOINT [ "/app/bin/fiber-api" ]






######################## FOR DEV ENVIRONMENT ##################################
################################################################################
# Create dev image which same as final to run in k3s, just use the "k3s-dev.yaml" config
FROM alpine:latest AS dev
WORKDIR /app

# Copy the executable from the "build" stage.
COPY --from=build /bin/fiber-api /app/bin/
COPY --from=build /app/configs/ /app/configs/
COPY --from=build /app/web/ /app/web/

ARG UID=10001
RUN --mount=type=cache,target=/var/cache/apk \
    apk --no-cache --update add \
        ca-certificates \
        tzdata \
        sqlite-dev \
        ffmpeg && \
        # bash && \
        update-ca-certificates && \
        apk cache clean && \
        mkdir -p /app/bin && \
        adduser \
           --disabled-password \
           --gecos "" \
           --home "/nonexistent" \
           --shell "/sbin/nologin" \
           --no-create-home \
           --uid "${UID}" \
           appuser && \
           chown 10001:10001 -R /app && \
         cp /app/configs/k3s-dev.yaml /app/configs/k3s.yaml
USER appuser

EXPOSE 7000

ENTRYPOINT [ "/app/bin/fiber-api" ]

################################################################################
# Create a intermediate stage for running the rabbitmq worker k3s
FROM alpine:latest AS rbmq-worker-dev
WORKDIR /app

# Copy the executable from the "build" stage.
COPY --from=build /app/configs/ /app/configs/
COPY --from=build /bin/fiber-api /app/bin/

ARG UID=10001
RUN --mount=type=cache,target=/var/cache/apk \
    apk --no-cache --update add \
    sqlite-dev && \
    apk cache clean && \
    adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser && \
    chown 10001:10001 -R /app && \ 
    cp /app/configs/k3s-dev.yaml /app/configs/k3s.yaml


USER appuser

# What the container should run when it is started.
ENTRYPOINT [ "/app/bin/fiber-api", "run-rbmq-worker" ]
